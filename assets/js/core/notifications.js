
class NotificationManager {
    constructor() {
        this.notifications = [];
        this.maxNotifications = 50;
        this.container = null;
        this.badge = null;
        this.unreadCount = 0;

        this.init();
    }

    init() {
        this.createToastContainer();

        this.createNotificationBadge();
    }

    createToastContainer() {
        this.container = document.createElement('div');
        this.container.id = 'toastContainer';
        this.container.className = 'toast-container';
        document.body.appendChild(this.container);
    }

    createNotificationBadge() {
        this.badge = document.createElement('div');
        this.badge.id = 'notificationBadge';
        this.badge.className = 'notification-badge';
        this.badge.style.display = 'none';

        const header = document.querySelector('.header .user-info');
        if (header) {
            header.insertBefore(this.badge, header.firstChild);
        }
    }

    showToast(message, type = 'info', duration = 5000) {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;

        const icon = this.getIcon(type);

        toast.innerHTML = `
            <div class="toast-icon">${icon}</div>
            <div class="toast-message">${message}</div>
            <button class="toast-close" onclick="this.parentElement.remove()">√ó</button>
        `;

        this.container.appendChild(toast);

        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        if (duration > 0) {
            setTimeout(() => {
                this.removeToast(toast);
            }, duration);
        }

        return toast;
    }

    removeToast(toast) {
        toast.classList.remove('show');
        setTimeout(() => {
            if (toast.parentElement) {
                toast.parentElement.removeChild(toast);
            }
        }, 300);
    }

    getIcon(type) {
        const icons = {
            success: '‚úì',
            error: '‚úï',
            warning: '‚ö†',
            info: '‚Ñπ'
        };
        return icons[type] || icons.info;
    }

    handleWebSocketEvent(eventData) {
        const eventType = eventData.event;
        const data = eventData.data;

        this.addToHistory(eventData);

        let message = '';
        let type = 'info';

        switch (eventType) {
            // === Product Events ===
            case 'product.created':
                message = `–¢–æ–≤–∞—Ä "${data.product_name}" —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é`;
                type = 'info';
                break;

            case 'product.updated':
                message = `–¢–æ–≤–∞—Ä "${data.product_name}" –æ–±–Ω–æ–≤–ª–µ–Ω`;
                type = 'info';
                break;

            case 'product.deleted':
                message = `–¢–æ–≤–∞—Ä "${data.product_name}" —É–¥–∞–ª–µ–Ω`;
                type = 'warning';
                break;

            case 'product.approved':
                message = `‚úÖ –¢–æ–≤–∞—Ä "${data.product_name}" –æ–¥–æ–±—Ä–µ–Ω! –°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏: $${data.approval_fee}`;
                type = 'success';
                break;

            case 'product.rejected':
                message = `‚ùå –¢–æ–≤–∞—Ä "${data.product_name}" –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${data.moderation_notes || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`;
                type = 'error';
                break;

            // === Balance Events ===
            case 'balance.updated':
                const change = data.change_amount > 0 ? `+$${data.change_amount}` : `-$${Math.abs(data.change_amount)}`;
                message = `–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${change}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: $${data.new_balance}`;
                type = data.change_amount > 0 ? 'success' : 'warning';
                break;

            // === Transaction Events ===
            case 'transaction.completed':
                message = `üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $${data.amount} (${this.getTransactionTypeName(data.transaction_type)})`;
                type = 'success';
                break;

            case 'transaction.failed':
                message = `‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: ${data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                type = 'error';
                break;

            // === Order Events ===
            case 'order.created':
                message = `üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä "${data.product_name}" ($${data.amount})`;
                type = 'info';
                break;

            case 'order.completed':
                message = `‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ —Ç–æ–≤–∞—Ä "${data.product_name}" –≤—ã–ø–æ–ª–Ω–µ–Ω`;
                type = 'success';
                break;

            // === Review Events ===
            case 'review.created':
                message = `‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä "${data.product_name}" (${data.rating}/5): ${data.comment}`;
                type = 'info';
                break;

            // === Settings Events ===
            case 'settings.updated':
                message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${data.description || data.key}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${data.old_value} ‚Üí ${data.new_value}`;
                type = 'info';
                break;

            // === Moderation Events ===
            case 'moderation.queue_updated':
                message = `üìã –û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${data.pending_count} —Ç–æ–≤–∞—Ä–æ–≤ –æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏`;
                type = 'info';
                break;

            default:
                message = `–°–æ–±—ã—Ç–∏–µ: ${eventType}`;
                type = 'info';
        }

        this.showToast(message, type);

        this.incrementUnreadCount();
    }

    getTransactionTypeName(type) {
        const names = {
            'top_up': '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
            'product_rent': '–ê—Ä–µ–Ω–¥–∞ —Ç–æ–≤–∞—Ä–∞',
            'product_purchase': '–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞',
            'shop_payout': '–í—ã–ø–ª–∞—Ç–∞',
            'approval_fee': '–ö–æ–º–∏—Å—Å–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
        };
        return names[type] || type;
    }

    addToHistory(eventData) {
        this.notifications.unshift({
            ...eventData,
            timestamp: eventData.timestamp || new Date().toISOString(),
            read: false
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (this.notifications.length > this.maxNotifications) {
            this.notifications = this.notifications.slice(0, this.maxNotifications);
        }
    }

    incrementUnreadCount() {
        this.unreadCount++;
        this.updateBadge();
    }

    resetUnreadCount() {
        this.unreadCount = 0;
        this.updateBadge();

        // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        this.notifications.forEach(n => n.read = true);
    }

    updateBadge() {
        if (!this.badge) return;

        if (this.unreadCount > 0) {
            this.badge.textContent = this.unreadCount > 99 ? '99+' : this.unreadCount;
            this.badge.style.display = 'flex';
        } else {
            this.badge.style.display = 'none';
        }
    }

    getHistory() {
        return this.notifications;
    }

    clearHistory() {
        this.notifications = [];
        this.resetUnreadCount();
    }

    showHistoryModal() {
        // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–∞–ª–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        const modal = document.createElement('div');
        modal.className = 'notification-history-modal';

        const content = `
            <div class="notification-history-content">
                <div class="notification-history-header">
                    <h3>–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                    <button onclick="this.closest('.notification-history-modal').remove()">√ó</button>
                </div>
                <div class="notification-history-list">
                    ${this.notifications.length === 0 ? '<p style="text-align: center; color: #999;">–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>' : ''}
                    ${this.notifications.map(n => `
                        <div class="notification-history-item ${n.read ? 'read' : 'unread'}">
                            <div class="notification-history-time">
                                ${new Date(n.timestamp).toLocaleString('ru-RU')}
                            </div>
                            <div class="notification-history-event">${n.event}</div>
                            <div class="notification-history-data">
                                ${JSON.stringify(n.data, null, 2)}
                            </div>
                        </div>
                    `).join('')}
                </div>
                <div class="notification-history-footer">
                    <button class="btn btn-secondary" onclick="notificationManager.clearHistory(); this.closest('.notification-history-modal').remove();">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë</button>
                    <button class="btn btn-primary" onclick="notificationManager.resetUnreadCount();">–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</button>
                </div>
            </div>
        `;

        modal.innerHTML = content;
        document.body.appendChild(modal);

        setTimeout(() => this.resetUnreadCount(), 500);
    }
}

window.notificationManager = new NotificationManager();
