console.log('üî• admin.js LOADED üî•');

// API_URL —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ config.js
let token = localStorage.getItem('token');
let accountType = localStorage.getItem('accountType');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = async function () {
    console.log('Loading admin page...');
    console.log('Token:', token);
    console.log('AccountType:', accountType);

    if (token && accountType === 'admin') {
        console.log('Admin is authenticated, loading dashboard...');
        await loadAdminDashboard();
    } else {
        console.log('Not authorized as admin, showing login page...');
        document.getElementById('loginPage').style.display = 'flex';
    }
};

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google –¥–ª—è –∞–¥–º–∏–Ω–∞
async function loginWithGoogle() {
    try {
        // Admin –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–¥–µ—Ç —á–µ—Ä–µ–∑ user account_type
        // –†–æ–ª—å admin –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –ø–æ email
        const params = new URLSearchParams({
            account_type: 'user',
            platform: 'web'
        });
        const response = await fetch(`${API_URL}/api/v1/auth/google/url?${params.toString()}`);
        const data = await response.json();

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Google OAuth
        localStorage.setItem('requestedAccountType', 'user');
        window.location.href = data.authorization_url;
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message);
    }
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('accountType');
    localStorage.removeItem('refresh_token');
    token = null;
    accountType = null;
    window.location.href = `${window.location.origin}/index.html`;
}

// API –∑–∞–ø—Ä–æ—Å
async function apiRequest(endpoint, method = 'GET', body = null) {
    const currentToken = localStorage.getItem('token');
    const options = {
        method,
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${currentToken}`
        }
    };

    if (body) {
        options.body = JSON.stringify(body);
    }

    const response = await fetch(`${API_URL}${endpoint}`, options);

    if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    }

    return await response.json();
}

// Helper function to format image URL
function formatImageUrl(imageUrl) {
    console.log('üîç formatImageUrl called with:', imageUrl);

    if (!imageUrl) return null;

    // If it's already a full URL (starts with http:// or https://), return as is
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
        console.log('‚úÖ Image URL is already full URL:', imageUrl);
        return imageUrl;
    }

    // If it starts with /, it's a path from root
    if (imageUrl.startsWith('/')) {
        const fullUrl = `${API_URL}${imageUrl}`;
        console.log('‚úÖ Added API_URL to path:', fullUrl);
        return fullUrl;
    }

    // Otherwise, add both API_URL and /
    const fullUrl = `${API_URL}/${imageUrl}`;
    console.log('‚úÖ Added API_URL and / to filename:', fullUrl);
    return fullUrl;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showAlert(message, type = 'success', container = 'adminAlertContainer') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type}`;
    alertDiv.textContent = message;

    const alertContainer = document.getElementById(container);
    alertContainer.innerHTML = '';
    alertContainer.appendChild(alertDiv);

    setTimeout(() => {
        alertDiv.remove();
    }, 5000);
}

// === –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===

async function loadAdminDashboard() {
    const loginPage = document.getElementById('loginPage');
    if (loginPage) {
        loginPage.style.display = 'none';
    }
    const adminDashboard = document.getElementById('adminDashboard');
    if (adminDashboard) {
        adminDashboard.style.display = 'block';
    }

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –¥–ª—è –∞–¥–º–∏–Ω–∞ –ü–ï–†–í–´–ú –î–ï–õ–û–ú
        // –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
        initAdminWebSocket();
        
        const dashboard = await apiRequest('/api/v1/admin/dashboard');
        document.getElementById('adminTotalUsers').textContent = dashboard.total_users;
        document.getElementById('adminTotalShops').textContent = dashboard.total_shops;
        document.getElementById('adminTotalProducts').textContent = dashboard.total_products;
        document.getElementById('adminPendingModeration').textContent = dashboard.pending_moderation;

        // Display balances
        document.getElementById('adminUserBalances').textContent = `$${dashboard.total_user_balances.toFixed(2)}`;
        document.getElementById('adminShopBalances').textContent = `$${dashboard.total_shop_balances.toFixed(2)}`;

        await loadModerationQueue();
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message, 'error', 'adminAlertContainer');
    }
}

function switchAdminTab(tab) {
    document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(t => t.classList.remove('active'));

    event.target.classList.add('active');
    document.getElementById(tab + 'Tab').classList.add('active');

    if (tab === 'moderation') loadModerationQueue();
    if (tab === 'refunds') loadRefunds();
    if (tab === 'users') loadUsersList();
    if (tab === 'shops') loadShopsList();
    if (tab === 'settings') loadSettings();
}

async function loadUsersList() {
    try {
        const users = await apiRequest('/api/v1/admin/users');
        const container = document.getElementById('usersList');

        if (users.length === 0) {
            container.innerHTML = '<p style="color: #999;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç</p>';
            return;
        }

        container.innerHTML = `
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr style="border-bottom: 2px solid #e0e0e0;">
                        <th style="padding: 10px; text-align: left;">Email</th>
                        <th style="padding: 10px; text-align: left;">–ò–º—è</th>
                        <th style="padding: 10px; text-align: right;">–ë–∞–ª–∞–Ω—Å</th>
                        <th style="padding: 10px; text-align: center;">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</th>
                        <th style="padding: 10px; text-align: center;">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–∫</th>
                        <th style="padding: 10px; text-align: left;">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => {
            const date = new Date(user.created_at).toLocaleDateString('ru-RU');
            return `
                            <tr style="border-bottom: 1px solid #f0f0f0;">
                                <td style="padding: 10px;">${user.email}</td>
                                <td style="padding: 10px;">${user.name || 'N/A'}</td>
                                <td style="padding: 10px; text-align: right; font-weight: 600; color: #667eea;">
                                    $${user.balance.toFixed(2)}
                                </td>
                                <td style="padding: 10px; text-align: center;">${user.free_generations}</td>
                                <td style="padding: 10px; text-align: center;">${user.free_try_ons}</td>
                                <td style="padding: 10px;">${date}</td>
                            </tr>
                        `;
        }).join('')}
                </tbody>
            </table>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
}

async function loadShopsList() {
    try {
        const shops = await apiRequest('/api/v1/admin/shops');
        const container = document.getElementById('shopsList');

        if (shops.length === 0) {
            container.innerHTML = '<p style="color: #999;">–ú–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ—Ç</p>';
            return;
        }

        container.innerHTML = `
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr style="border-bottom: 2px solid #e0e0e0;">
                        <th style="padding: 10px; text-align: left;">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th style="padding: 10px; text-align: left;">Email</th>
                        <th style="padding: 10px; text-align: right;">–ë–∞–ª–∞–Ω—Å</th>
                        <th style="padding: 10px; text-align: left;">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</th>
                    </tr>
                </thead>
                <tbody>
                    ${shops.map(shop => {
            const date = new Date(shop.created_at).toLocaleDateString('ru-RU');
            return `
                            <tr style="border-bottom: 1px solid #f0f0f0;">
                                <td style="padding: 10px; font-weight: 600;">${shop.shop_name}</td>
                                <td style="padding: 10px;">${shop.email}</td>
                                <td style="padding: 10px; text-align: right; font-weight: 600; color: #10b981;">
                                    $${shop.balance.toFixed(2)}
                                </td>
                                <td style="padding: 10px;">${date}</td>
                            </tr>
                        `;
        }).join('')}
                </tbody>
            </table>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤:', error);
    }
}

async function loadModerationQueue() {
    try {
        const products = await apiRequest('/api/v1/admin/moderation/queue');
        const container = document.getElementById('moderationQueue');

        if (products.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</p></div>';
            return;
        }

        container.innerHTML = products.map(product => {
            const imageUrl = product.images && product.images.length > 0 ? formatImageUrl(product.images[0]) : null;

            return `
                <div class="product-card">
                    <div class="product-image">
                        ${imageUrl
                    ? `<img src="${imageUrl}" alt="${product.name}" onerror="console.error('Failed to load image:', this.src); this.parentElement.innerHTML='<div style=&quot;color: #999; text-align: center; padding: 40px;&quot;>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>'">`
                    : '<div style="color: #999; text-align: center; padding: 40px;">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>'}
                    </div>
                    <div class="product-info">
                        <div class="product-name">${product.name}</div>
                        <div class="product-price">$${product.price}</div>
                        <p style="font-size: 13px; color: #666; margin: 8px 0;">
                            ${product.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
                        </p>
                        <div class="product-actions">
                            <button class="btn btn-success" onclick="moderateProduct(${product.id}, 'approve')">–û–¥–æ–±—Ä–∏—Ç—å</button>
                            <button class="btn btn-danger" onclick="moderateProduct(${product.id}, 'reject')">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ' + error.message, 'error', 'adminAlertContainer');
    }
}

async function moderateProduct(productId, action) {
    try {
        let notes = null;

        // For rejection, require notes
        if (action === 'reject') {
            notes = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:');
            if (!notes || notes.trim().length === 0) {
                showAlert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è', 'error', 'adminAlertContainer');
                return;
            }
        }

        const endpoint = action === 'approve'
            ? `/api/v1/admin/moderation/${productId}/approve`
            : `/api/v1/admin/moderation/${productId}/reject`;

        await apiRequest(endpoint, 'POST', { action, notes });
        showAlert(`–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}`, 'success', 'adminAlertContainer');
        await loadModerationQueue();
        await loadAdminDashboard();
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ' + error.message, 'error', 'adminAlertContainer');
    }
}

async function loadRefunds() {
    try {
        const status = document.getElementById('refundStatusFilter').value;
        const refunds = await apiRequest(`/api/v1/admin/refunds${status ? '?status=' + status : ''}`);
        const container = document.getElementById('refundsList');

        if (refunds.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç</p></div>';
            return;
        }

        container.innerHTML = refunds.map(refund => `
            <div style="border: 1px solid #e0e0e0; border-radius: 8px; padding: 15px; margin-bottom: 15px;">
                <p><strong>ID:</strong> ${refund.id}</p>
                <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${refund.reason}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${refund.status}</p>
                ${refund.status === 'pending' ? `
                    <div style="margin-top: 10px;">
                        <button class="btn btn-success" onclick="processRefund(${refund.id}, 'approve')">–û–¥–æ–±—Ä–∏—Ç—å</button>
                        <button class="btn btn-danger" onclick="processRefund(${refund.id}, 'reject')">–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                    </div>
                ` : ''}
            </div>
        `).join('');
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: ' + error.message, 'error', 'adminAlertContainer');
    }
}

async function processRefund(refundId, action) {
    try {
        await apiRequest(`/api/v1/admin/refunds/${refundId}/process`, 'POST', { action });
        showAlert(`–í–æ–∑–≤—Ä–∞—Ç ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω'}`, 'success', 'adminAlertContainer');
        await loadRefunds();
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: ' + error.message, 'error', 'adminAlertContainer');
    }
}

async function loadSettings() {
    try {
        const settings = await apiRequest('/api/v1/admin/settings');
        const container = document.getElementById('settingsList');

        container.innerHTML = settings.map(setting => `
            <div class="form-group" id="setting_group_${setting.key}">
                <label>${setting.description || setting.key}</label>
                <input type="text" value="${setting.value}" id="setting_${setting.key}">
                <button class="btn btn-primary" onclick="updateSetting('${setting.key}')">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </div>
        `).join('');
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message, 'error', 'adminAlertContainer');
    }
}

async function updateSetting(key) {
    try {
        const value = document.getElementById(`setting_${key}`).value;
        await apiRequest(`/api/v1/admin/settings/${key}`, 'PUT', { key, value });
        showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success', 'adminAlertContainer');
        // –ù–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        // loadSettings(); // –£–ë–†–ê–õ–ò - —Ç–µ–ø–µ—Ä—å –ø–æ–ª–µ –Ω–µ –ø—Ä—ã–≥–∞–µ—Ç!
    } catch (error) {
        showAlert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ' + error.message, 'error', 'adminAlertContainer');
    }
}

// === WEBSOCKET INTEGRATION ===

let wsInitialized = false; // Flag to prevent multiple initializations

function initAdminWebSocket() {
    console.log('üîå Initializing WebSocket for admin...');

    // Prevent multiple initializations
    if (wsInitialized) {
        console.log('‚ö†Ô∏è WebSocket already initialized, skipping...');
        return;
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    if (window.wsManager && token) {
        // Disconnect existing connection if any
        if (window.wsManager.ws && window.wsManager.ws.readyState !== WebSocket.CLOSED) {
            console.log('üîÑ Disconnecting existing WebSocket connection...');
            window.wsManager.disconnect();
        }

        window.wsManager.connect(token, 'admin');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupAdminWebSocketHandlers();

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        addAdminConnectionStatusIndicator();

        wsInitialized = true;
        console.log('‚úÖ WebSocket initialized successfully');
    } else {
        console.error('‚ùå WebSocket manager or token not found');
    }
}

function setupAdminWebSocketHandlers() {
    console.log('üì° Setting up WebSocket event handlers for admin...');
    
    // Clear existing handlers to prevent duplicates, but preserve internal handlers
    if (window.wsManager.eventHandlers) {
        // Only clear event handlers, not the entire object
        Object.keys(window.wsManager.eventHandlers).forEach(key => {
            window.wsManager.eventHandlers[key] = [];
        });
    } else {
        window.wsManager.eventHandlers = {};
    }
    
    // === Moderation Events ===
    window.wsManager.on('moderation.queue_updated', (data) => {
        console.log('üìã Moderation queue updated:', data);
        if (window.notificationManager) {
            window.notificationManager.handleWebSocketEvent(data);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –¥–∞—à–±–æ—Ä–¥–µ
        const pendingElement = document.getElementById('adminPendingModeration');
        if (pendingElement && data.data && data.data.pending_count !== undefined) {
            pendingElement.textContent = data.data.pending_count;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        const moderationTab = document.getElementById('moderationTab');
        if (moderationTab && moderationTab.classList.contains('active')) {
            loadModerationQueue();
        }
    });

    // === Product Events (–¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏) ===
    window.wsManager.on('product.created', (data) => {
        console.log('üì¶ Product created (admin view):', data);
        if (window.notificationManager) {
            window.notificationManager.handleWebSocketEvent(data);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥
        loadAdminDashboard();
    });

    // === Settings Events ===
    window.wsManager.on('settings.updated', (data) => {
        console.log('‚öôÔ∏è Settings updated:', data);
        if (window.notificationManager) {
            window.notificationManager.handleWebSocketEvent(data);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∞ –Ω–µ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
        if (data.data && data.data.key) {
            const inputElement = document.getElementById(`setting_${data.data.key}`);
            if (inputElement && data.data.new_value !== undefined) {
                inputElement.value = data.data.new_value;
            }
        }
    });

    // === Balance Events ===
    window.wsManager.on('balance.updated', (data) => {
        console.log('üí∞ Balance updated:', data);
        if (window.notificationManager) {
            window.notificationManager.handleWebSocketEvent(data);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        loadAdminDashboard();

        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        const usersTab = document.getElementById('usersTab');
        const shopsTab = document.getElementById('shopsTab');
        
        if (usersTab && usersTab.classList.contains('active')) {
            loadUsers();
        }
        if (shopsTab && shopsTab.classList.contains('active')) {
            loadShops();
        }
    });

    // === Transaction Events ===
    window.wsManager.on('transaction.completed', (data) => {
        console.log('üí≥ Transaction completed:', data);
        if (window.notificationManager) {
            window.notificationManager.handleWebSocketEvent(data);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        loadAdminDashboard();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
        const usersTab = document.getElementById('usersTab');
        const shopsTab = document.getElementById('shopsTab');
        
        if (usersTab && usersTab.classList.contains('active')) {
            loadUsers();
        }
        if (shopsTab && shopsTab.classList.contains('active')) {
            loadShops();
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    window.wsManager.onConnectionStateChange((state) => {
        updateAdminConnectionStatus(state);
    });
    
    console.log('‚úÖ WebSocket event handlers registered');
}

function addAdminConnectionStatusIndicator() {
    const header = document.querySelector('.header .user-info');
    if (!header) return;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const indicator = document.createElement('div');
    indicator.id = 'wsConnectionStatus';
    indicator.className = 'ws-status';
    indicator.title = 'WebSocket —Å—Ç–∞—Ç—É—Å';

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ header
    header.insertBefore(indicator, header.firstChild);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    updateAdminConnectionStatus(window.wsManager.getConnectionState());
}

function updateAdminConnectionStatus(state) {
    const indicator = document.getElementById('wsConnectionStatus');
    if (!indicator) return;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
    indicator.className = 'ws-status';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    switch (state) {
        case 'connected':
            indicator.classList.add('ws-status-connected');
            indicator.title = 'WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω';
            break;
        case 'connecting':
        case 'reconnecting':
            indicator.classList.add('ws-status-connecting');
            indicator.title = 'WebSocket –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...';
            break;
        case 'disconnected':
        case 'error':
            indicator.classList.add('ws-status-disconnected');
            indicator.title = 'WebSocket –æ—Ç–∫–ª—é—á–µ–Ω';
            break;
    }
}

// –û—Ç–∫–ª—é—á–∞–µ–º WebSocket –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
const originalAdminLogout = logout;
logout = function() {
    console.log('üîå Disconnecting WebSocket on logout...');
    if (window.wsManager) {
        window.wsManager.disconnect();
    }
    originalAdminLogout();
};

// Make functions globally accessible for inline onclick handlers
window.loginWithGoogle = loginWithGoogle;
window.logout = logout;
window.moderateProduct = moderateProduct;
window.processRefund = processRefund;
window.updateSetting = updateSetting;
window.switchAdminTab = switchAdminTab;
