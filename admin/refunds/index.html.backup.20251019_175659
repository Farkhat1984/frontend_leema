<!DOCTYPE html>
<html lang="ru">

<head>
    <!-- Redesigned with Tailwind CSS -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í–æ–∑–≤—Ä–∞—Ç—ã - Admin Panel</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="../../assets/css/pages/shop.css">
</head>

<body>
    <div class="dashboard">
        <div class="header">
            <h1>üë®‚Äçüíº Admin Panel</h1>
            <div class="user-info">
                <div class="user-avatar" id="adminAvatar">A</div>
                <span id="adminName">Admin</span>
                <button class="logout-btn" onclick="logout()">–í—ã–π—Ç–∏</button>
            </div>
        </div>

        <div class="container">
            <!-- Alert Container -->
            <div id="alertContainer"></div>

            <!-- Admin Header -->
            <div class="admin-header">
                <h1>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞–º–∏</h1>
                <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤</p>
            </div>

            <!-- Statistics -->
            <div class="stats-grid">
                <div class="stat-card warning">
                    <h3>‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
                    <div class="value" id="statRequested">0</div>
                    <div class="subvalue">–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</div>
                </div>
                <div class="stat-card success">
                    <h3>‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ</h3>
                    <div class="value" id="statApproved">0</div>
                    <div class="subvalue">–£—Å–ø–µ—à–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤</div>
                </div>
                <div class="stat-card danger">
                    <h3>‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ</h3>
                    <div class="value" id="statRejected">0</div>
                    <div class="subvalue">–û—Ç–∫–∞–∑–æ–≤</div>
                </div>
                <div class="stat-card">
                    <h3>üíµ –û–±—â–∞—è —Å—É–º–º–∞</h3>
                    <div class="value" id="statTotal">$0</div>
                    <div class="subvalue">–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º</div>
                </div>
            </div>

            <!-- Filters -->
            <div class="filters-section">
                <div class="filters-container">
                    <label style="font-weight: 500;">–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
                    <select id="statusFilter" class="filter-select" onchange="loadRefunds()">
                        <option value="">–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã</option>
                        <option value="requested" selected>‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏</option>
                        <option value="approved">‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ</option>
                        <option value="rejected">‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ</option>
                        <option value="completed">üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                    </select>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loadingState" class="loading" style="display: none;">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...</p>
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="empty-state" style="display: none;">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="10"></circle>
                    <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
                    <line x1="9" y1="9" x2="9.01" y2="9"></line>
                    <line x1="15" y1="9" x2="15.01" y2="9"></line>
                </svg>
                <h3>–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç</p>
            </div>

            <!-- Refunds Container -->
            <div class="refunds-container" id="refundsContainer">
            </div>
        </div>
    </div>

    <!-- Approve Modal -->
    <div class="modal" id="approveModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç</h2>
                <button class="modal-close" onclick="closeModal('approveModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                    <textarea id="approveNotes" placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."></textarea>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal('approveModal')">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn btn-approve" onclick="confirmApprove()">–û–¥–æ–±—Ä–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç</button>
            </div>
        </div>
    </div>

    <!-- Reject Modal -->
    <div class="modal" id="rejectModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç</h2>
                <button class="modal-close" onclick="closeModal('rejectModal')">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è *</label>
                    <textarea id="rejectNotes" placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è..." required></textarea>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal('rejectModal')">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn btn-reject" onclick="confirmReject()">–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</button>
            </div>
        </div>
    </div>

    <script src="../../assets/js/config.js"></script>
    <script>
        let refunds = [];
        let currentRefundId = null;
        let ws = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', async () => {
            await checkAuth();
            await loadRefunds();
            connectWebSocket();
        });

        async function checkAuth() {
            const token = localStorage.getItem('admin_token');
            if (!token) {
                window.location.href = '../index.html';
                return;
            }

            try {
                const response = await fetch(`${API_URL}/admin/dashboard`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Not authorized');
                }

                const adminData = JSON.parse(localStorage.getItem('admin_data'));
                if (adminData) {
                    document.getElementById('adminName').textContent = adminData.name || 'Admin';
                    document.getElementById('adminAvatar').textContent = (adminData.name || 'A')[0].toUpperCase();
                }
            } catch (error) {
                console.error('Auth check failed:', error);
                localStorage.removeItem('admin_token');
                localStorage.removeItem('admin_data');
                window.location.href = '../index.html';
            }
        }

        async function loadRefunds() {
            const token = localStorage.getItem('admin_token');
            const status = document.getElementById('statusFilter').value;

            showLoading();

            try {
                const params = new URLSearchParams();
                if (status) params.append('status', status);

                const response = await fetch(`${API_URL}/admin/refunds?${params}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) throw new Error('Failed to load refunds');

                refunds = await response.json();
                renderRefunds();
                updateStatistics();
            } catch (error) {
                console.error('Failed to load refunds:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç');
                showEmpty();
            }
        }

        function renderRefunds() {
            const container = document.getElementById('refundsContainer');
            container.innerHTML = '';

            hideLoading();

            if (!refunds || refunds.length === 0) {
                showEmpty();
                return;
            }

            document.getElementById('emptyState').style.display = 'none';

            refunds.forEach(refund => {
                const card = createRefundCard(refund);
                container.appendChild(card);
            });
        }

        function createRefundCard(refund) {
            const card = document.createElement('div');
            card.className = 'refund-card';

            const showActions = refund.status === 'requested';
            const statusClass = `status-${refund.status}`;
            const statusText = getStatusText(refund.status);

            card.innerHTML = `
                <div class="refund-header">
                    <span class="refund-id">–í–æ–∑–≤—Ä–∞—Ç #${refund.id}</span>
                    <span class="refund-status ${statusClass}">${statusText}</span>
                </div>
                <div class="refund-body">
                    <div class="refund-info">
                        <div class="info-item">
                            <span class="info-label">–ó–∞–∫–∞–∑</span>
                            <span class="info-value">#${refund.order_number || refund.order_id}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞</span>
                            <span class="info-value refund-amount">$${parseFloat(refund.amount).toFixed(2)}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞</span>
                            <span class="info-value">${formatDate(refund.created_at)}</span>
                        </div>
                        ${refund.processed_at ? `
                            <div class="info-item">
                                <span class="info-label">–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>
                                <span class="info-value">${formatDate(refund.processed_at)}</span>
                            </div>
                        ` : ''}
                    </div>
                    ${refund.reason ? `
                        <div class="refund-reason">
                            <h4>–ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</h4>
                            <p>${refund.reason}</p>
                        </div>
                    ` : ''}
                    ${refund.admin_notes ? `
                        <div class="refund-reason">
                            <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</h4>
                            <p>${refund.admin_notes}</p>
                        </div>
                    ` : ''}
                </div>
                ${showActions ? `
                    <div class="refund-actions">
                        <button class="btn btn-approve" onclick="approveRefund(${refund.id})">
                            ‚úÖ –û–¥–æ–±—Ä–∏—Ç—å
                        </button>
                        <button class="btn btn-reject" onclick="rejectRefund(${refund.id})">
                            ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                        </button>
                    </div>
                ` : ''}
            `;

            return card;
        }

        function getStatusText(status) {
            const statusMap = {
                'requested': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ',
                'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'
            };
            return statusMap[status] || status;
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function approveRefund(refundId) {
            currentRefundId = refundId;
            document.getElementById('approveNotes').value = '';
            document.getElementById('approveModal').classList.add('show');
        }

        function rejectRefund(refundId) {
            currentRefundId = refundId;
            document.getElementById('rejectNotes').value = '';
            document.getElementById('rejectModal').classList.add('show');
        }

        async function confirmApprove() {
            const notes = document.getElementById('approveNotes').value;
            await processRefund('approve', notes);
        }

        async function confirmReject() {
            const notes = document.getElementById('rejectNotes').value;
            
            if (!notes.trim()) {
                showError('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
                return;
            }

            await processRefund('reject', notes);
        }

        async function processRefund(action, adminNotes) {
            const token = localStorage.getItem('admin_token');

            try {
                const response = await fetch(`${API_URL}/admin/refunds/${currentRefundId}/process`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action,
                        admin_notes: adminNotes
                    })
                });

                if (!response.ok) throw new Error('Failed to process refund');

                const result = await response.json();
                showSuccess(result.message);
                
                closeModal('approveModal');
                closeModal('rejectModal');
                
                await loadRefunds();
            } catch (error) {
                console.error('Failed to process refund:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç');
            }
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
            currentRefundId = null;
        }

        function updateStatistics() {
            const stats = {
                requested: 0,
                approved: 0,
                rejected: 0,
                totalAmount: 0
            };

            refunds.forEach(refund => {
                if (refund.status === 'requested') stats.requested++;
                if (refund.status === 'approved' || refund.status === 'completed') {
                    stats.approved++;
                    stats.totalAmount += parseFloat(refund.amount);
                }
                if (refund.status === 'rejected') stats.rejected++;
            });

            document.getElementById('statRequested').textContent = stats.requested;
            document.getElementById('statApproved').textContent = stats.approved;
            document.getElementById('statRejected').textContent = stats.rejected;
            document.getElementById('statTotal').textContent = `$${stats.totalAmount.toFixed(2)}`;
        }

        function showLoading() {
            document.getElementById('loadingState').style.display = 'block';
            document.getElementById('refundsContainer').style.display = 'none';
            document.getElementById('emptyState').style.display = 'none';
        }

        function hideLoading() {
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('refundsContainer').style.display = 'grid';
        }

        function showEmpty() {
            hideLoading();
            document.getElementById('emptyState').style.display = 'block';
            document.getElementById('refundsContainer').style.display = 'none';
        }

        function showSuccess(message) {
            showAlert(message, 'success');
        }

        function showError(message) {
            showAlert(message, 'error');
        }

        function showAlert(message, type = 'info') {
            const container = document.getElementById('alertContainer');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;
            container.appendChild(alert);

            setTimeout(() => alert.remove(), 5000);
        }

        function connectWebSocket() {
            const token = localStorage.getItem('admin_token');
            const wsUrl = `${WS_URL}/ws?token=${token}&client_type=admin`;

            ws = new WebSocket(wsUrl);

            ws.onopen = () => {
                console.log('‚úÖ WebSocket connected');
            };

            ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                } catch (error) {
                    console.error('WebSocket message error:', error);
                }
            };

            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };

            ws.onclose = () => {
                console.log('WebSocket disconnected. Reconnecting...');
                setTimeout(connectWebSocket, 5000);
            };
        }

        function handleWebSocketMessage(data) {
            console.log('WebSocket message:', data);

            if (data.event === 'refund.requested') {
                showSuccess(`üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç: –∑–∞–∫–∞–∑ #${data.order_number}`);
                playNotificationSound();
                loadRefunds();
            }

            if (data.event === 'refund.processed') {
                loadRefunds();
            }
        }

        function playNotificationSound() {
            try {
                const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBTGH0fPTgjMGHm7A7+OZSA0PVKzn77BdGAg+ltryxnMlBSuBzvLZiTYIG2m98KKbMAcsPJ/Z');
                audio.play().catch(() => {});
            } catch (error) {
                console.log('Could not play sound:', error);
            }
        }

        function logout() {
            localStorage.removeItem('admin_token');
            localStorage.removeItem('admin_data');
            window.location.href = '../index.html';
        }

        // Close modals on Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeModal('approveModal');
                closeModal('rejectModal');
            }
        });

        // Close modals on outside click
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModal(modal.id);
                }
            });
        });
    </script>
</body>

</html>
