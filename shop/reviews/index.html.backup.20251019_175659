<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Отзывы на товары - Fashion AI Platform</title>
    <link rel="stylesheet" href="../../assets/css/layouts/style.css">
    <link rel="stylesheet" href="../../assets/css/pages/shop.css">
    <style>
        .reviews-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 30px;
            border-radius: 12px;
            color: white;
            margin-bottom: 30px;
        }

        .reviews-header h1 {
            margin: 0 0 10px 0;
            font-size: 28px;
        }

        .reviews-header p {
            margin: 0;
            opacity: 0.9;
        }

        /* Statistics Cards */
        .reviews-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
        }

        .stat-card.excellent {
            border-left-color: #10b981;
        }

        .stat-card.good {
            border-left-color: #3b82f6;
        }

        .stat-card.needs-reply {
            border-left-color: #f59e0b;
        }

        .stat-card h3 {
            margin: 0 0 10px 0;
            font-size: 14px;
            color: #666;
            text-transform: uppercase;
            font-weight: 600;
        }

        .stat-card .value {
            font-size: 32px;
            font-weight: 700;
            color: #333;
            margin-bottom: 5px;
        }

        .stat-card .subvalue {
            font-size: 14px;
            color: #666;
        }

        /* Star Rating Display */
        .stars {
            display: inline-flex;
            gap: 2px;
            font-size: 18px;
        }

        .stars.small {
            font-size: 14px;
        }

        .star {
            color: #ddd;
        }

        .star.filled {
            color: #f59e0b;
        }

        /* Filters */
        .filters-container {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            align-items: center;
        }

        .search-box {
            flex: 1;
            min-width: 250px;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
        }

        .filter-select {
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            background: white;
        }

        /* Review Card */
        .reviews-grid {
            display: grid;
            gap: 20px;
            margin-bottom: 30px;
        }

        .review-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .review-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .review-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #f0f0f0;
        }

        .review-user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 18px;
        }

        .user-details h4 {
            margin: 0 0 5px 0;
            font-size: 16px;
            color: #333;
        }

        .user-details .meta {
            font-size: 13px;
            color: #666;
        }

        .review-product {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 15px;
        }

        .product-image {
            width: 50px;
            height: 50px;
            border-radius: 8px;
            object-fit: cover;
        }

        .product-info {
            flex: 1;
        }

        .product-info h5 {
            margin: 0 0 5px 0;
            font-size: 14px;
            color: #333;
        }

        .product-info .price {
            font-size: 13px;
            color: #667eea;
            font-weight: 600;
        }

        .review-content {
            margin-bottom: 15px;
        }

        .review-text {
            color: #444;
            line-height: 1.6;
            margin-bottom: 10px;
        }

        .review-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
        }

        .reply-status {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            font-size: 13px;
            padding: 4px 10px;
            border-radius: 12px;
            font-weight: 500;
        }

        .reply-status.replied {
            background: #d1fae5;
            color: #065f46;
        }

        .reply-status.pending {
            background: #fed7aa;
            color: #92400e;
        }

        .btn-reply {
            padding: 8px 16px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: background 0.2s;
        }

        .btn-reply:hover {
            background: #5568d3;
        }

        .btn-reply:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        /* Shop Reply Section */
        .shop-reply {
            margin-top: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-left: 3px solid #667eea;
            border-radius: 8px;
        }

        .shop-reply-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .shop-badge {
            background: #667eea;
            color: white;
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .reply-date {
            font-size: 12px;
            color: #666;
        }

        .shop-reply-text {
            color: #444;
            line-height: 1.6;
        }

        /* Reply Form */
        .reply-form {
            margin-top: 15px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            display: none;
        }

        .reply-form.active {
            display: block;
        }

        .reply-form textarea {
            width: 100%;
            min-height: 100px;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: inherit;
            font-size: 14px;
            resize: vertical;
            margin-bottom: 10px;
        }

        .reply-form-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .btn-cancel {
            padding: 8px 16px;
            background: #f3f4f6;
            color: #666;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .btn-submit {
            padding: 8px 16px;
            background: #10b981;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
        }

        .btn-submit:hover {
            background: #059669;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .empty-state h3 {
            margin: 20px 0 10px 0;
            color: #333;
        }

        .empty-state p {
            color: #666;
            margin: 0;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 40px;
        }

        .spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f4f6;
            border-top-color: #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 30px;
        }

        .pagination button {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }

        .pagination button:hover:not(:disabled) {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination .page-info {
            color: #666;
            font-size: 14px;
        }

        /* Notification Toast */
        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: none;
            align-items: center;
            gap: 10px;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        .notification-toast.show {
            display: flex;
        }

        @keyframes slideIn {
            from {
                transform: translateX(400px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .notification-toast.success {
            border-left: 4px solid #10b981;
        }

        .notification-toast.error {
            border-left: 4px solid #ef4444;
        }

        /* Navigation Styles */
        .shop-nav {
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-brand h2 {
            margin: 15px 0 5px 0;
            font-size: 22px;
        }

        .nav-role {
            font-size: 12px;
            color: #666;
        }

        .nav-menu {
            list-style: none;
            display: flex;
            gap: 5px;
            margin: 0;
            padding: 0;
        }

        .nav-menu a {
            padding: 10px 15px;
            text-decoration: none;
            color: #666;
            border-radius: 6px;
            transition: all 0.2s;
            font-size: 14px;
        }

        .nav-menu a:hover {
            background: #f3f4f6;
            color: #667eea;
        }

        .nav-menu a.active {
            background: #667eea;
            color: white;
        }

        .nav-logout {
            color: #ef4444 !important;
        }

        .shop-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 30px 20px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .reviews-stats {
                grid-template-columns: 1fr;
            }

            .filters-container {
                flex-direction: column;
                align-items: stretch;
            }

            .search-box {
                min-width: 100%;
            }

            .review-header {
                flex-direction: column;
                gap: 15px;
            }

            .review-footer {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }

            .nav-menu {
                flex-wrap: wrap;
                gap: 3px;
            }

            .nav-menu a {
                padding: 8px 10px;
                font-size: 13px;
            }
        }
    </style>
</head>

<body>
    <!-- Navigation -->
    <nav class="shop-nav">
        <div class="nav-container">
            <div class="nav-brand">
                <h2>👔 Fashion AI Platform</h2>
                <span class="nav-role">Shop Panel</span>
            </div>
            <ul class="nav-menu">
                <li><a href="../index.html">📊 Дашборд</a></li>
                <li><a href="../products/">🛍️ Товары</a></li>
                <li><a href="../orders/">📦 Заказы</a></li>
                <li><a href="../customers/">👥 Клиенты</a></li>
                <li><a href="../reviews/" class="active">⭐ Отзывы</a></li>
                <li><a href="../notifications/">🔔 Уведомления</a></li>
                <li><a href="../billing/">💰 Баланс</a></li>
                <li><a href="../profile/">⚙️ Профиль</a></li>
                <li><a href="#" onclick="logout()" class="nav-logout">🚪 Выход</a></li>
            </ul>
        </div>
    </nav>

    <div class="shop-container">
        <!-- Page Header -->
        <div class="reviews-header">
            <h1>⭐ Отзывы на товары</h1>
            <p>Управляйте отзывами клиентов и отвечайте на них</p>
        </div>

        <!-- Statistics -->
        <div class="reviews-stats">
            <div class="stat-card">
                <h3>Всего отзывов</h3>
                <div class="value" id="totalReviews">-</div>
                <div class="subvalue">За всё время</div>
            </div>
            <div class="stat-card excellent">
                <h3>Средний рейтинг</h3>
                <div class="value" id="averageRating">-</div>
                <div class="subvalue" id="ratingStars"></div>
            </div>
            <div class="stat-card good">
                <h3>Отличные отзывы</h3>
                <div class="value" id="excellentReviews">-</div>
                <div class="subvalue">5 звёзд</div>
            </div>
            <div class="stat-card needs-reply">
                <h3>Требуют ответа</h3>
                <div class="value" id="needsReply">-</div>
                <div class="subvalue">Без ответа магазина</div>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-container">
            <input type="text" 
                   class="search-box" 
                   id="searchInput" 
                   placeholder="🔍 Поиск по отзывам, товарам, покупателям...">
            
            <select class="filter-select" id="ratingFilter">
                <option value="">Все рейтинги</option>
                <option value="5">⭐⭐⭐⭐⭐ 5 звёзд</option>
                <option value="4">⭐⭐⭐⭐ 4 звезды</option>
                <option value="3">⭐⭐⭐ 3 звезды</option>
                <option value="2">⭐⭐ 2 звезды</option>
                <option value="1">⭐ 1 звезда</option>
            </select>

            <select class="filter-select" id="replyFilter">
                <option value="">Все отзывы</option>
                <option value="replied">С ответом</option>
                <option value="pending">Без ответа</option>
            </select>

            <select class="filter-select" id="productFilter">
                <option value="">Все товары</option>
                <!-- Dynamically populated -->
            </select>
        </div>

        <!-- Reviews List -->
        <div id="reviewsContainer">
            <div class="loading">
                <div class="spinner"></div>
                <p>Загрузка отзывов...</p>
            </div>
        </div>

        <!-- Pagination -->
        <div class="pagination" id="pagination" style="display: none;">
            <button id="prevPage" onclick="changePage(-1)">← Prev</button>
            <span class="page-info">
                Page <span id="currentPage">1</span> of <span id="totalPages">1</span>
            </span>
            <button id="nextPage" onclick="changePage(1)">Next →</button>
        </div>
    </div>

    <!-- Notification Toast -->
    <div class="notification-toast" id="notificationToast">
        <span id="notificationMessage"></span>
    </div>

    <!-- Audio for notifications -->
    <audio id="notificationSound" preload="auto">
        <source src="../../assets/sounds/notification.mp3" type="audio/mpeg">
    </audio>

    <script>
        const API_BASE = 'http://localhost:8080/api/v1';
        let shopToken = localStorage.getItem('shop_token');
        let currentPage = 1;
        const perPage = 10;
        let allReviews = [];
        let filteredReviews = [];
        let products = [];
        let ws = null;

        // Authentication check
        if (!shopToken) {
            window.location.href = '../../shop/login.html';
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            loadShopInfo();
            loadProducts();
            loadReviews();
            setupFilters();
            setupWebSocket();
        });

        // Load shop info
        async function loadShopInfo() {
            try {
                const response = await fetch(`${API_BASE}/shops/me`, {
                    headers: {
                        'Authorization': `Bearer ${shopToken}`
                    }
                });

                if (response.ok) {
                    const shop = await response.json();
                    document.getElementById('shopName').textContent = shop.name;
                } else if (response.status === 401) {
                    localStorage.removeItem('shop_token');
                    window.location.href = '../../shop/login.html';
                }
            } catch (error) {
                console.error('Error loading shop info:', error);
            }
        }

        // Load products for filter
        async function loadProducts() {
            try {
                const response = await fetch(`${API_BASE}/shops/me/products`, {
                    headers: {
                        'Authorization': `Bearer ${shopToken}`
                    }
                });

                if (response.ok) {
                    products = await response.json();
                    populateProductFilter();
                }
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        // Populate product filter dropdown
        function populateProductFilter() {
            const select = document.getElementById('productFilter');
            products.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = product.name;
                select.appendChild(option);
            });
        }

        // Load reviews
        async function loadReviews() {
            try {
                const response = await fetch(`${API_BASE}/shops/me/reviews`, {
                    headers: {
                        'Authorization': `Bearer ${shopToken}`
                    }
                });

                if (response.ok) {
                    allReviews = await response.json();
                    filteredReviews = [...allReviews];
                    displayReviews();
                    updateStatistics();
                } else {
                    showError('Failed to load reviews');
                }
            } catch (error) {
                console.error('Error loading reviews:', error);
                showError('Error loading reviews');
            }
        }

        // Display reviews
        function displayReviews() {
            const container = document.getElementById('reviewsContainer');
            
            if (filteredReviews.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div style="font-size: 64px;">⭐</div>
                        <h3>Нет отзывов</h3>
                        <p>У вас пока нет отзывов на товары</p>
                    </div>
                `;
                document.getElementById('pagination').style.display = 'none';
                return;
            }

            // Pagination
            const totalPages = Math.ceil(filteredReviews.length / perPage);
            const startIndex = (currentPage - 1) * perPage;
            const endIndex = startIndex + perPage;
            const pageReviews = filteredReviews.slice(startIndex, endIndex);

            // Generate HTML
            const reviewsHTML = pageReviews.map(review => createReviewCard(review)).join('');
            container.innerHTML = `<div class="reviews-grid">${reviewsHTML}</div>`;

            // Update pagination
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
            document.getElementById('pagination').style.display = 'flex';
        }

        // Create review card HTML
        function createReviewCard(review) {
            const hasReply = review.shop_reply && review.shop_reply.trim() !== '';
            const starsHTML = generateStars(review.rating);
            const userInitial = review.user_name ? review.user_name.charAt(0).toUpperCase() : 'U';
            const product = products.find(p => p.id === review.product_id);
            const productImage = product?.images?.[0] || '../../assets/img/placeholder.jpg';

            return `
                <div class="review-card" data-review-id="${review.id}">
                    <div class="review-header">
                        <div class="review-user-info">
                            <div class="user-avatar">${userInitial}</div>
                            <div class="user-details">
                                <h4>${escapeHtml(review.user_name || 'Anonymous')}</h4>
                                <div class="meta">
                                    ${starsHTML}
                                    <span style="margin: 0 8px;">•</span>
                                    <span>${formatDate(review.created_at)}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="review-product">
                        <img src="${productImage}" alt="${escapeHtml(review.product_name)}" class="product-image">
                        <div class="product-info">
                            <h5>${escapeHtml(review.product_name)}</h5>
                            <div class="price">$${review.product_price?.toFixed(2)}</div>
                        </div>
                    </div>

                    <div class="review-content">
                        <p class="review-text">${escapeHtml(review.comment || 'No comment provided')}</p>
                    </div>

                    ${hasReply ? `
                        <div class="shop-reply">
                            <div class="shop-reply-header">
                                <span class="shop-badge">SHOP</span>
                                <span class="reply-date">${formatDate(review.reply_created_at)}</span>
                            </div>
                            <p class="shop-reply-text">${escapeHtml(review.shop_reply)}</p>
                        </div>
                    ` : ''}

                    <div class="review-footer">
                        <span class="reply-status ${hasReply ? 'replied' : 'pending'}">
                            ${hasReply ? '✓ Answered' : '⏳ Needs Reply'}
                        </span>
                        <button class="btn-reply" 
                                onclick="toggleReplyForm(${review.id})"
                                ${hasReply ? 'disabled' : ''}>
                            ${hasReply ? 'Already Replied' : '💬 Reply'}
                        </button>
                    </div>

                    ${!hasReply ? `
                        <div class="reply-form" id="replyForm-${review.id}">
                            <textarea id="replyText-${review.id}" 
                                      placeholder="Write your reply to this review..."></textarea>
                            <div class="reply-form-actions">
                                <button class="btn-cancel" onclick="toggleReplyForm(${review.id})">Cancel</button>
                                <button class="btn-submit" onclick="submitReply(${review.id})">Send Reply</button>
                            </div>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        // Generate star rating HTML
        function generateStars(rating, small = false) {
            const sizeClass = small ? 'small' : '';
            let html = `<span class="stars ${sizeClass}">`;
            for (let i = 1; i <= 5; i++) {
                html += `<span class="star ${i <= rating ? 'filled' : ''}">★</span>`;
            }
            html += '</span>';
            return html;
        }

        // Update statistics
        function updateStatistics() {
            const total = allReviews.length;
            const sumRating = allReviews.reduce((sum, r) => sum + r.rating, 0);
            const avgRating = total > 0 ? (sumRating / total).toFixed(1) : 0;
            const excellent = allReviews.filter(r => r.rating === 5).length;
            const needsReply = allReviews.filter(r => !r.shop_reply || r.shop_reply.trim() === '').length;

            document.getElementById('totalReviews').textContent = total;
            document.getElementById('averageRating').textContent = avgRating;
            document.getElementById('ratingStars').innerHTML = generateStars(Math.round(avgRating), true);
            document.getElementById('excellentReviews').textContent = excellent;
            document.getElementById('needsReply').textContent = needsReply;
        }

        // Setup filters
        function setupFilters() {
            const searchInput = document.getElementById('searchInput');
            const ratingFilter = document.getElementById('ratingFilter');
            const replyFilter = document.getElementById('replyFilter');
            const productFilter = document.getElementById('productFilter');

            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    applyFilters();
                }, 300);
            });

            ratingFilter.addEventListener('change', applyFilters);
            replyFilter.addEventListener('change', applyFilters);
            productFilter.addEventListener('change', applyFilters);
        }

        // Apply filters
        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const ratingValue = document.getElementById('ratingFilter').value;
            const replyValue = document.getElementById('replyFilter').value;
            const productValue = document.getElementById('productFilter').value;

            filteredReviews = allReviews.filter(review => {
                // Search filter
                const matchesSearch = !searchTerm || 
                    review.user_name?.toLowerCase().includes(searchTerm) ||
                    review.product_name?.toLowerCase().includes(searchTerm) ||
                    review.comment?.toLowerCase().includes(searchTerm);

                // Rating filter
                const matchesRating = !ratingValue || review.rating === parseInt(ratingValue);

                // Reply filter
                const hasReply = review.shop_reply && review.shop_reply.trim() !== '';
                const matchesReply = !replyValue || 
                    (replyValue === 'replied' && hasReply) ||
                    (replyValue === 'pending' && !hasReply);

                // Product filter
                const matchesProduct = !productValue || review.product_id === parseInt(productValue);

                return matchesSearch && matchesRating && matchesReply && matchesProduct;
            });

            currentPage = 1;
            displayReviews();
        }

        // Toggle reply form
        function toggleReplyForm(reviewId) {
            const form = document.getElementById(`replyForm-${reviewId}`);
            if (form) {
                form.classList.toggle('active');
                if (form.classList.contains('active')) {
                    document.getElementById(`replyText-${reviewId}`).focus();
                }
            }
        }

        // Submit reply
        async function submitReply(reviewId) {
            const replyText = document.getElementById(`replyText-${reviewId}`).value.trim();
            
            if (!replyText) {
                showNotification('Please enter a reply', 'error');
                return;
            }

            try {
                const response = await fetch(`${API_BASE}/reviews/${reviewId}/reply`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${shopToken}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reply: replyText })
                });

                if (response.ok) {
                    showNotification('Reply sent successfully!', 'success');
                    loadReviews(); // Reload to show updated data
                } else {
                    const error = await response.json();
                    showNotification(error.message || 'Failed to send reply', 'error');
                }
            } catch (error) {
                console.error('Error submitting reply:', error);
                showNotification('Error submitting reply', 'error');
            }
        }

        // Pagination
        function changePage(delta) {
            const totalPages = Math.ceil(filteredReviews.length / perPage);
            const newPage = currentPage + delta;
            
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                displayReviews();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        }

        // WebSocket setup
        function setupWebSocket() {
            ws = new WebSocket('ws://localhost:8080/ws');

            ws.onopen = () => {
                console.log('WebSocket connected');
                ws.send(JSON.stringify({
                    type: 'auth',
                    token: shopToken,
                    role: 'shop'
                }));
            };

            ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                } catch (error) {
                    console.error('WebSocket message error:', error);
                }
            };

            ws.onclose = () => {
                console.log('WebSocket disconnected, reconnecting...');
                setTimeout(setupWebSocket, 3000);
            };
        }

        // Handle WebSocket messages
        function handleWebSocketMessage(data) {
            if (data.type === 'review.created') {
                playNotificationSound();
                showNotification('New review received! 🌟', 'success');
                loadReviews();
            }
        }

        // Play notification sound
        function playNotificationSound() {
            const sound = document.getElementById('notificationSound');
            if (sound) {
                sound.play().catch(e => console.log('Sound play failed:', e));
            }
        }

        // Show notification
        function showNotification(message, type = 'success') {
            const toast = document.getElementById('notificationToast');
            const messageEl = document.getElementById('notificationMessage');
            
            toast.className = `notification-toast ${type}`;
            messageEl.textContent = message;
            toast.classList.add('show');

            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Utility functions
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 60) return `${diffMins} min ago`;
            if (diffHours < 24) return `${diffHours}h ago`;
            if (diffDays < 7) return `${diffDays}d ago`;
            
            return date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric',
                year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
            });
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showError(message) {
            const container = document.getElementById('reviewsContainer');
            container.innerHTML = `
                <div class="empty-state">
                    <div style="font-size: 64px;">❌</div>
                    <h3>Error</h3>
                    <p>${message}</p>
                </div>
            `;
        }

        function logout() {
            localStorage.removeItem('shop_token');
            window.location.href = '../../shop/login.html';
        }
    </script>
</body>

</html>
