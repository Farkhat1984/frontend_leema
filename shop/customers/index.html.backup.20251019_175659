<!DOCTYPE html>
<html lang="ru">

<head>
    <!-- Redesigned with Tailwind CSS -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã - Fashion AI Platform</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="../../assets/css/pages/shop.css">
</head>

<body>
    <!-- Navigation -->
    <nav class="shop-nav">
        <div class="nav-container">
            <div class="nav-brand">
                <h2>üëî Fashion AI Platform</h2>
                <span class="nav-role">Shop Panel</span>
            </div>
            <ul class="nav-menu">
                <li><a href="../index.html">üìä –î–∞—à–±–æ—Ä–¥</a></li>
                <li><a href="../products/">üõçÔ∏è –¢–æ–≤–∞—Ä—ã</a></li>
                <li><a href="../orders/">üì¶ –ó–∞–∫–∞–∑—ã</a></li>
                <li><a href="../customers/" class="active">üë• –ö–ª–∏–µ–Ω—Ç—ã</a></li>
                <li><a href="../reviews/">‚≠ê –û—Ç–∑—ã–≤—ã</a></li>
                <li><a href="../notifications/">üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</a></li>
                <li><a href="../billing/">üí∞ –ë–∞–ª–∞–Ω—Å</a></li>
                <li><a href="../profile/">‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å</a></li>
                <li><a href="#" onclick="logout()" class="nav-logout">üö™ –í—ã—Ö–æ–¥</a></li>
            </ul>
        </div>
    </nav>

    <div class="shop-container">
        <!-- Header -->
        <div class="customers-header">
            <h1>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</h1>
            <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É –∏ —Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</p>
        </div>

        <!-- Alert Container -->
        <div id="alertContainer"></div>

        <!-- Statistics -->
        <div class="customers-stats">
            <div class="stat-card">
                <h3>–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
                <div class="value" id="totalCustomers">0</div>
                <div class="subvalue">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div class="stat-card vip">
                <h3>VIP –∫–ª–∏–µ–Ω—Ç—ã</h3>
                <div class="value" id="vipCustomers">0</div>
                <div class="subvalue">–ü–æ—Ç—Ä–∞—Ç–∏–ª–∏ > $1000</div>
            </div>
            <div class="stat-card regular">
                <h3>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ</h3>
                <div class="value" id="regularCustomers">0</div>
                <div class="subvalue">2+ –∑–∞–∫–∞–∑–æ–≤</div>
            </div>
            <div class="stat-card new">
                <h3>–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã</h3>
                <div class="value" id="newCustomers">0</div>
                <div class="subvalue">1 –∑–∞–∫–∞–∑</div>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-container">
            <input type="text" id="searchInput" class="search-box" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email...">
            
            <select id="tierFilter" class="filter-select">
                <option value="">–í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã</option>
                <option value="vip">VIP –∫–ª–∏–µ–Ω—Ç—ã</option>
                <option value="regular">–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ</option>
                <option value="new">–ù–æ–≤—ã–µ</option>
            </select>

            <select id="sortFilter" class="filter-select">
                <option value="total_spent_desc">–ü–æ —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫ ‚Üì</option>
                <option value="total_spent_asc">–ü–æ —Å—É–º–º–µ –ø–æ–∫—É–ø–æ–∫ ‚Üë</option>
                <option value="orders_desc">–ü–æ –∫–æ–ª-–≤—É –∑–∞–∫–∞–∑–æ–≤ ‚Üì</option>
                <option value="orders_asc">–ü–æ –∫–æ–ª-–≤—É –∑–∞–∫–∞–∑–æ–≤ ‚Üë</option>
                <option value="recent">–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</option>
                <option value="name">–ü–æ –∏–º–µ–Ω–∏</option>
            </select>

            <button onclick="refreshCustomers()" class="filter-btn">
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
        </div>

        <!-- Customers Grid -->
        <div id="customersContainer">
            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...</div>
        </div>

        <!-- Pagination -->
        <div class="pagination" id="paginationContainer" style="display: none;">
            <button onclick="previousPage()" id="prevBtn">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è</button>
            <span class="page-info">
                –°—Ç—Ä–∞–Ω–∏—Ü–∞ <span id="currentPage">1</span> –∏–∑ <span id="totalPages">1</span>
            </span>
            <button onclick="nextPage()" id="nextBtn">–°–ª–µ–¥—É—é—â–∞—è ‚Üí</button>
        </div>
    </div>

    <script src="../../assets/js/core/config.js"></script>
    <script>
        // Global variables
        let customers = [];
        let filteredCustomers = [];
        let currentPage = 1;
        const itemsPerPage = 12;
        let shopId = null;

        // Initialize
        document.addEventListener('DOMContentLoaded', async () => {
            await checkAuth();
            await loadCustomers();
            setupEventListeners();
        });

        // Check authentication
        async function checkAuth() {
            const token = localStorage.getItem('shop_token');
            if (!token) {
                window.location.href = '/shop/index.html';
                return;
            }

            try {
                const response = await fetch(`${API_URL}/api/v1/shops/me`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Authentication failed');
                }

                const data = await response.json();
                shopId = data.shop.id;
            } catch (error) {
                console.error('Auth error:', error);
                localStorage.removeItem('shop_token');
                window.location.href = '/shop/index.html';
            }
        }

        // Load customers from orders
        async function loadCustomers() {
            try {
                const token = localStorage.getItem('shop_token');
                const response = await fetch(`${API_URL}/api/v1/shops/me/orders`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to load orders');
                }

                const data = await response.json();
                const orders = data.orders || [];

                // Aggregate customer data from orders
                const customerMap = new Map();

                orders.forEach(order => {
                    const customerId = order.user_id;
                    const customerEmail = order.user?.email || 'N/A';
                    const customerName = order.user?.first_name && order.user?.last_name
                        ? `${order.user.first_name} ${order.user.last_name}`
                        : customerEmail;

                    if (!customerMap.has(customerId)) {
                        customerMap.set(customerId, {
                            id: customerId,
                            name: customerName,
                            email: customerEmail,
                            orders: [],
                            total_spent: 0,
                            total_orders: 0,
                            first_order_date: order.created_at,
                            last_order_date: order.created_at
                        });
                    }

                    const customer = customerMap.get(customerId);
                    
                    // Calculate amount for this shop's items only
                    let shopAmount = 0;
                    if (order.items) {
                        order.items.forEach(item => {
                            if (item.product?.shop_id === shopId) {
                                shopAmount += item.subtotal || (item.price * item.quantity);
                            }
                        });
                    }

                    if (shopAmount > 0) {
                        customer.orders.push({
                            ...order,
                            shop_amount: shopAmount
                        });
                        customer.total_spent += shopAmount;
                        customer.total_orders++;

                        // Update dates
                        if (new Date(order.created_at) < new Date(customer.first_order_date)) {
                            customer.first_order_date = order.created_at;
                        }
                        if (new Date(order.created_at) > new Date(customer.last_order_date)) {
                            customer.last_order_date = order.created_at;
                        }
                    }
                });

                // Convert to array and calculate tiers
                customers = Array.from(customerMap.values())
                    .filter(c => c.total_orders > 0)
                    .map(customer => ({
                        ...customer,
                        tier: calculateCustomerTier(customer),
                        avg_order_value: customer.total_spent / customer.total_orders
                    }));

                filteredCustomers = [...customers];
                updateStatistics();
                renderCustomers();

            } catch (error) {
                console.error('Error loading customers:', error);
                showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'error');
            }
        }

        // Calculate customer tier
        function calculateCustomerTier(customer) {
            if (customer.total_spent >= 1000) {
                return 'vip';
            } else if (customer.total_orders >= 2) {
                return 'regular';
            } else {
                return 'new';
            }
        }

        // Update statistics
        function updateStatistics() {
            const stats = {
                total: customers.length,
                vip: customers.filter(c => c.tier === 'vip').length,
                regular: customers.filter(c => c.tier === 'regular').length,
                new: customers.filter(c => c.tier === 'new').length
            };

            document.getElementById('totalCustomers').textContent = stats.total;
            document.getElementById('vipCustomers').textContent = stats.vip;
            document.getElementById('regularCustomers').textContent = stats.regular;
            document.getElementById('newCustomers').textContent = stats.new;
        }

        // Render customers
        function renderCustomers() {
            const container = document.getElementById('customersContainer');
            
            if (filteredCustomers.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>üòä –ü–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
                        <p>–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                    </div>
                `;
                document.getElementById('paginationContainer').style.display = 'none';
                return;
            }

            // Pagination
            const totalPages = Math.ceil(filteredCustomers.length / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageCustomers = filteredCustomers.slice(startIndex, endIndex);

            // Render cards
            container.innerHTML = `
                <div class="customers-grid">
                    ${pageCustomers.map(customer => `
                        <div class="customer-card" onclick="showCustomerDetail(${customer.id})">
                            <span class="customer-tier ${customer.tier}">
                                ${customer.tier === 'vip' ? '‚≠ê VIP' : customer.tier === 'regular' ? 'üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' : 'üÜï –ù–æ–≤—ã–π'}
                            </span>
                            <div class="customer-info">
                                <div class="customer-avatar">
                                    ${getInitials(customer.name)}
                                </div>
                                <div class="customer-details">
                                    <h3>${escapeHtml(customer.name)}</h3>
                                    <p>${escapeHtml(customer.email)}</p>
                                </div>
                            </div>
                            <div class="customer-stats">
                                <div class="customer-stat">
                                    <div class="label">–ó–∞–∫–∞–∑–æ–≤</div>
                                    <div class="value">${customer.total_orders}</div>
                                </div>
                                <div class="customer-stat">
                                    <div class="label">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                                    <div class="value">$${customer.total_spent.toFixed(2)}</div>
                                </div>
                                <div class="customer-stat">
                                    <div class="label">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</div>
                                    <div class="value">$${customer.avg_order_value.toFixed(2)}</div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;

            // Update pagination
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;
            document.getElementById('prevBtn').disabled = currentPage === 1;
            document.getElementById('nextBtn').disabled = currentPage === totalPages;
            document.getElementById('paginationContainer').style.display = 'flex';
        }

        // Show customer detail modal
        function showCustomerDetail(customerId) {
            const customer = customers.find(c => c.id === customerId);
            if (!customer) return;

            // Sort orders by date (newest first)
            const sortedOrders = [...customer.orders].sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
            );

            const modalHTML = `
                <div class="modal-overlay" onclick="closeModal(event)">
                    <div class="modal-container" onclick="event.stopPropagation()">
                        <div class="modal-header">
                            <h2>üë§ ${escapeHtml(customer.name)}</h2>
                            <button class="modal-close" onclick="closeModal()">&times;</button>
                        </div>
                        <div class="modal-body">
                            <!-- Customer Info -->
                            <div class="customer-detail-section">
                                <h3>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h3>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <div class="label">Email</div>
                                        <div class="value">${escapeHtml(customer.email)}</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="label">–°–µ–≥–º–µ–Ω—Ç</div>
                                        <div class="value">
                                            <span class="customer-tier ${customer.tier}">
                                                ${customer.tier === 'vip' ? '‚≠ê VIP' : customer.tier === 'regular' ? 'üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π' : 'üÜï –ù–æ–≤—ã–π'}
                                            </span>
                                        </div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="label">–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑</div>
                                        <div class="value">${formatDate(customer.first_order_date)}</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="label">–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑</div>
                                        <div class="value">${formatDate(customer.last_order_date)}</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Statistics -->
                            <div class="customer-detail-section">
                                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫</h3>
                                <div class="detail-grid">
                                    <div class="detail-item">
                                        <div class="label">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
                                        <div class="value">${customer.total_orders}</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="label">–û–±—â–∞—è —Å—É–º–º–∞</div>
                                        <div class="value">$${customer.total_spent.toFixed(2)}</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="label">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</div>
                                        <div class="value">$${customer.avg_order_value.toFixed(2)}</div>
                                    </div>
                                    <div class="detail-item">
                                        <div class="label">–î–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</div>
                                        <div class="value">${getDaysSinceFirstOrder(customer.first_order_date)}</div>
                                    </div>
                                </div>
                            </div>

                            <!-- Order History -->
                            <div class="customer-detail-section">
                                <h3>üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</h3>
                                <table class="order-history-table">
                                    <thead>
                                        <tr>
                                            <th>–î–∞—Ç–∞</th>
                                            <th>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</th>
                                            <th>–¢–æ–≤–∞—Ä–æ–≤</th>
                                            <th>–°—É–º–º–∞</th>
                                            <th>–°—Ç–∞—Ç—É—Å</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${sortedOrders.map(order => `
                                            <tr>
                                                <td>${formatDate(order.created_at)}</td>
                                                <td><strong>#${order.order_number}</strong></td>
                                                <td>${order.items?.filter(i => i.product?.shop_id === shopId).length || 0}</td>
                                                <td><strong>$${order.shop_amount.toFixed(2)}</strong></td>
                                                <td>
                                                    <span class="status-badge ${order.status}">
                                                        ${getStatusText(order.status)}
                                                    </span>
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }

        // Close modal
        function closeModal(event) {
            if (event && event.target.classList.contains('modal-container')) {
                return;
            }
            const modal = document.querySelector('.modal-overlay');
            if (modal) {
                modal.remove();
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Search
            let searchTimeout;
            document.getElementById('searchInput').addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    applyFilters();
                }, 300);
            });

            // Filters
            document.getElementById('tierFilter').addEventListener('change', applyFilters);
            document.getElementById('sortFilter').addEventListener('change', applyFilters);

            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
        }

        // Apply filters
        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const tierFilter = document.getElementById('tierFilter').value;
            const sortFilter = document.getElementById('sortFilter').value;

            // Filter
            filteredCustomers = customers.filter(customer => {
                const matchesSearch = customer.name.toLowerCase().includes(searchTerm) ||
                                    customer.email.toLowerCase().includes(searchTerm);
                const matchesTier = !tierFilter || customer.tier === tierFilter;

                return matchesSearch && matchesTier;
            });

            // Sort
            switch (sortFilter) {
                case 'total_spent_desc':
                    filteredCustomers.sort((a, b) => b.total_spent - a.total_spent);
                    break;
                case 'total_spent_asc':
                    filteredCustomers.sort((a, b) => a.total_spent - b.total_spent);
                    break;
                case 'orders_desc':
                    filteredCustomers.sort((a, b) => b.total_orders - a.total_orders);
                    break;
                case 'orders_asc':
                    filteredCustomers.sort((a, b) => a.total_orders - b.total_orders);
                    break;
                case 'recent':
                    filteredCustomers.sort((a, b) => new Date(b.last_order_date) - new Date(a.last_order_date));
                    break;
                case 'name':
                    filteredCustomers.sort((a, b) => a.name.localeCompare(b.name));
                    break;
            }

            currentPage = 1;
            renderCustomers();
        }

        // Refresh customers
        async function refreshCustomers() {
            document.getElementById('customersContainer').innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...</div>';
            await loadCustomers();
        }

        // Pagination
        function previousPage() {
            if (currentPage > 1) {
                currentPage--;
                renderCustomers();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        }

        function nextPage() {
            const totalPages = Math.ceil(filteredCustomers.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderCustomers();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        }

        // Utility functions
        function getInitials(name) {
            return name.split(' ')
                .map(word => word[0])
                .join('')
                .toUpperCase()
                .slice(0, 2);
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        }

        function getDaysSinceFirstOrder(dateString) {
            const firstOrder = new Date(dateString);
            const now = new Date();
            const diffTime = Math.abs(now - firstOrder);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        }

        function getStatusText(status) {
            const statusMap = {
                'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω—ë–Ω',
                'refunded': '–í–æ–∑–≤—Ä–∞—Ç'
            };
            return statusMap[status] || status;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showAlert(message, type = 'error') {
            const alertContainer = document.getElementById('alertContainer');
            const alertHTML = `
                <div class="alert ${type}">
                    <span>${type === 'error' ? '‚ùå' : '‚úÖ'}</span>
                    <span>${message}</span>
                </div>
            `;
            alertContainer.innerHTML = alertHTML;

            setTimeout(() => {
                alertContainer.innerHTML = '';
            }, 5000);
        }

        // Logout
        function logout() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                localStorage.removeItem('shop_token');
                window.location.href = '/shop/index.html';
            }
        }
    </script>
</body>

</html>
